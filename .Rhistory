print(paste("R^2 PRESS -> ", Q.R2Pred(fcc, press)))
## TEstes de hipotese
#Shapiro-wilk
print(shapiro.test(residuals(modelo)))
#Durbin-Watson test
print(dwtest(modelo))
#Breusch-Pagan test
print(bptest(modelo))
## PLOT  ##
# Residuo
PrintResiduoNormalizado(pathImagens("compressao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
PrintResiduoVarReg(pathImagens("compressao", "residuo.png"),
"Resistência à Compressão", residuos, dados$COMPRESSAO)
PrintResiduoVarReg(pathImagens("compressao", "residuo_eva.png"),
"EVA (%)", residuos, dados$EVA)
PrintResiduoVarReg(pathImagens("compressao", "residuo_fibra.png"),
"Fibras (%)", residuos, dados$FIBRA)
# Funcao
printModeloAjuste(pathImagens("compressao", "modelo_ajuste.png"),
modelo, fcc_r, fcc, ylim=c(10,25), xlim=c(10,25))
# Graficos 3d
lim_xyz <- c(0.26, 0.021, 0, 26)
lbl_xyz <- c("EVA (%)", "Fibra (%)", "Resistência à Compress\u{E3}o (MPa)")
print3DFunc(pathImagens("compressao", "3d_1.png"),
modelo,
list(z=-50, x=-70, y=0),
lbl_xyz,
lim_xyz)
print3DFunc(pathImagens("compressao", "3d_2.png"),
modelo,
list(z=-120, x=-70, y=0),
lbl_xyz,
lim_xyz)
# Curvas de Nível
printCurvasNivelFunc(pathImagens("compressao", "curva_nivel.png"), modelo,  lbl_xyz,lim_xyz)
# Max resistencia Barra
maxFib <- optimizeFibModelo(modelo, iEva=seq(0.05, 0.25, by=0.05), TRUE)
printMaxResistenciaFibra(pathImagens("compressao", "barra_max.png"), maxFib, lbl_xyz[3])
# Max resistencia Evolucao
maxFib <- optimizeFibModelo(modelo, iEva=seq(0, 0.25, by=0.005), TRUE)
printMaxResistenciaFibraLine(pathImagens("compressao", "eva_max.png"), maxFib, lbl_xyz[3])
# Resistencia por eva, com 3 curvas 0,1,2 % fibra
printResistenciaFibraLinha(pathImagens("compressao", "eva_0_1_2.png"), modelo, lbl_xyz[3])
# Resistencia por fibra, com 3 curvas 5, 15, 25 % fibra
printResistenciaEVALinha(pathImagens("compressao", "fibra_5_15_25.png"), modelo, lbl_xyz[3])
}
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
## Dados de Compressao
fcc   <- dados$COMPRESSAO
## Calcula o y da regressao
y     <- fcc-fcc0
######################### Rergessao  #########################
### MODELO 1 COMPLETO
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
anova(modelo)
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
anova(modelo)
summary(modelo)
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$MODULO
## Dados de Compressao
fcc   <- dados$MODULO
## Calcula o y da regressao
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
# vendo a superfície ajustada
args(panel.3d.contour)
body(panel.3d.contour)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
fcc      <- dados$MODULO
residuos <- fcc-fcc_r
residuals()
residuals
residuals(modelo)
residuos
print(paste("R^2 -> ", Q.R2(fcc_r, fcc)))
PrintResiduoNormalizado(pathImagens("deformacao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
modelo, residuos, fcc_r)
PrintResiduoNormalizado(pathImagens("deformacao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
## Dados de Compressao
fcc   <- dados$COMPRESSAO
## Calcula o y da regressao
y     <- fcc-fcc0
### MODELO 2 RESUMO
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
anova(modelo)
dados
lenght(dados)
length(dados)
args(panel.3d.contour)
body(panel.3d.contour)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
fcc      <- dados$COMPRESSAO
residuos <- fcc-fcc_r
print(summary(modelo))
print(paste("R^2 -> ", Q.R2(fcc_r, fcc)))
press <- Q.PRESS(modelo, 'COMPRESSAO', fcc0, dados)
print(paste("PRESS -> ", press))
print(paste("R^2 PRESS -> ", Q.R2Pred(fcc, press)))
length(dados$TIPO)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
### MODELO 2 RESUMO
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
## Dados de Compressao
fcc   <- dados$COMPRESSAO
## Calcula o y da regressao
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
anova(modelo)
modelo
M.predict(modelo, 0.25, 0)
M.predict(modelo, 0, 0)
M.predict(modelo, 0.25, 0)
c_e = M.predict(modelo, 0.25, 0)
s_e = M.predict(modelo, 0, 0)
(c_e-s_e)/s_e
(c_e-s_e)/s_e *100
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
reducao_res
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$TRACAO
## Dados de Compressao
fcc   <- dados$TRACAO
## Calcula o y da regressao
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA,data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
anova(modelo)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
reducao_res
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$MODULO
## Dados de Compressao
fcc   <- dados$MODULO
## Calcula o y da regressao
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
reducao_res
library(plotrix)
install.packages(c("plotrix", "lmtest", "qpcR", "nlstools", "qpcR", "rpanel", "lattice", "latticeExtra", "grid", "lattice", "RColorBrewer", "ggplot2"))
library(plotrix)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
# Função principal para a geração dos gráficos
run_all <- function(modelo, dados){
# vendo a superfície ajustada
args(panel.3d.contour)
body(panel.3d.contour)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
fcc      <- dados$COMPRESSAO
residuos <- fcc-fcc_r
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
print(summary(modelo))
print(paste("R^2 -> ", Q.R2(fcc_r, fcc)))
print(paste("SSE -> ", Q.SSE(fcc_r, fcc)))
print(paste("MSE -> ", Q.MSE(modelo, fcc_r, fcc)))
press <- Q.PRESS(modelo, 'COMPRESSAO', fcc0, dados)
print(paste("PRESS -> ", press))
print(paste("R^2 PRESS -> ", Q.R2Pred(fcc, press)))
## TEstes de hipotese
#Shapiro-wilk
print(shapiro.test(residuals(modelo)))
#Durbin-Watson test
print(dwtest(modelo))
#Breusch-Pagan test
print(bptest(modelo))
## PLOT  ##
# Residuo
PrintResiduoNormalizado(pathImagens("compressao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
PrintResiduoVarReg(pathImagens("compressao", "residuo.png"),
"Resistência à Compressão", residuos, dados$COMPRESSAO)
PrintResiduoVarReg(pathImagens("compressao", "residuo_eva.png"),
"EVA (%)", residuos, dados$EVA)
PrintResiduoVarReg(pathImagens("compressao", "residuo_fibra.png"),
"Fibras (%)", residuos, dados$FIBRA)
# Funcao
printModeloAjuste(pathImagens("compressao", "modelo_ajuste.png"),
modelo, fcc_r, fcc, ylim=c(10,25), xlim=c(10,25))
# Graficos 3d
lim_xyz <- c(0.26, 0.021, 0, 26)
lbl_xyz <- c("EVA (%)", "Fibra (%)", "Resistência à Compress\u{E3}o (MPa)")
print3DFunc(pathImagens("compressao", "3d_1.png"),
modelo,
list(z=-50, x=-70, y=0),
lbl_xyz,
lim_xyz)
print3DFunc(pathImagens("compressao", "3d_2.png"),
modelo,
list(z=-120, x=-70, y=0),
lbl_xyz,
lim_xyz)
# Graficos 3d EFICIENCIA
print3DEfici(pathImagens("compressao", "3d_ef.png"),
modelo,
list(z=140, x=-70, y=-00),
c("EVA (%)", "Fibra (%)", "Eficiência (%)"),
c(0.26, 0.021, 0, 31))
# Curvas de Nível
printCurvasNivelFunc(pathImagens("compressao", "curva_nivel.png"), modelo,  lbl_xyz,lim_xyz)
# Max resistencia Barra
maxFib <- optimizeFibModelo(modelo, iEva=seq(0.05, 0.25, by=0.05), TRUE)
printMaxResistenciaFibra(pathImagens("compressao", "barra_max.png"), maxFib, lbl_xyz[3])
# Max resistencia Evolucao
maxFib <- optimizeFibModelo(modelo, iEva=seq(0, 0.25, by=0.005), TRUE)
printMaxResistenciaFibraLine(pathImagens("compressao", "eva_max.png"), maxFib, lbl_xyz[3])
# Resistencia por eva, com 3 curvas 0,1,2 % fibra
printResistenciaFibraLinha(pathImagens("compressao", "eva_0_1_2.png"), modelo, lbl_xyz[3])
# Resistencia por fibra, com 3 curvas 5, 15, 25 % fibra
printResistenciaEVALinha(pathImagens("compressao", "fibra_5_15_25.png"), modelo, lbl_xyz[3])
}
dados <- read.table(file="dados.txt", header=T, sep=" ")
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
fcc   <- dados$COMPRESSAO
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
args(panel.3d.contour)
body(panel.3d.contour)
fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)
fcc      <- dados$COMPRESSAO
residuos <- fcc-fcc_r
reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)
print(summary(modelo))
print(paste("R^2 -> ", Q.R2(fcc_r, fcc)))
print(paste("SSE -> ", Q.SSE(fcc_r, fcc)))
print(paste("MSE -> ", Q.MSE(modelo, fcc_r, fcc)))
press <- Q.PRESS(modelo, 'COMPRESSAO', fcc0, dados)
print(paste("PRESS -> ", press))
print(paste("R^2 PRESS -> ", Q.R2Pred(fcc, press)))
print(shapiro.test(residuals(modelo)))
print(dwtest(modelo))
print(bptest(modelo))
PrintResiduoNormalizado(pathImagens("compressao", "residuo_normalizado.png"),
modelo, residuos, fcc_r)
print3DFunc(pathImagens("compressao", "3d_1.png"),
modelo,
list(z=-50, x=-70, y=0),
lbl_xyz,
lim_xyz)
print3DFunc(pathImagens("compressao", "3d_2.png"),
modelo,
list(z=-120, x=-70, y=0),
lbl_xyz,
lim_xyz)
print3DEfici(pathImagens("compressao", "3d_ef.png"),
modelo,
list(z=140, x=-70, y=-00),
c("EVA (%)", "Fibra (%)", "Eficiência (%)"),
c(0.26, 0.021, 0, 31))
lim_xyz <- c(0.26, 0.021, 0, 26)
lbl_xyz <- c("EVA (%)", "Fibra (%)", "Resistência à Compress\u{E3}o (MPa)")
print3DFunc(pathImagens("compressao", "3d_1.png"),
modelo,
list(z=-50, x=-70, y=0),
lbl_xyz,
lim_xyz)
printCurvasNivelFunc(pathImagens("compressao", "curva_nivel.png"), modelo,  lbl_xyz,lim_xyz)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
dados <- read.table(file="dados.txt", header=T, sep=" ")
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$COMPRESSAO
fcc   <- dados$COMPRESSAO
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
modelo      <-lm(y~0+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
FIBRA
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
modelo      <-lm(y~0+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
modelo      <-lm(y~0+FIBRA+EVA:FIBRA+I(EVA^2),data=dados)
summary(modelo)
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
modelo      <-lm(y~0+EVA:FIBRA+I(EVA^2)+I(FIBRA^2),data=dados)
summary(modelo)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
### DADOS
dados <- read.table(file="dados.txt", header=T, sep=" ")
## Filtra apenas o EVA fino
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
## Dados de compressão do CR (Concreto de Referencia)
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$TRACAO
## Dados de Compressao
fcc   <- dados$TRACAO
## Calcula o y da regressao
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA,data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
library(plotrix)
library(lmtest)
library(qpcR)
library(nlstools)
require(qpcR)
require(rpanel)
require(lattice)
require(latticeExtra)
require(grid)
require(lattice)
require(RColorBrewer)
library(ggplot2)
library("lattice")
library(latticeExtra) # for mergedTrellisLegendGrob()
source("lib/nlsResiduals.r")
source("lib/ridiculas_functions.r")
source("lib/msFunc.r")
dados <- read.table(file="dados.txt", header=T, sep=" ")
dados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]
fcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$MODULO
fcc   <- dados$MODULO
y     <- fcc-fcc0
modelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2), data=dados)
modelo      <-lm(y~0+EVA+I(FIBRA^2),data=dados)
modelo$fcc0 <- fcc0
summary(modelo)
