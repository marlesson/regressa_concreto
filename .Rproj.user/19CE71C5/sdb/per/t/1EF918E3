{
    "contents" : "library(plotrix)\nlibrary(lmtest)\nlibrary(qpcR)\nlibrary(nlstools)\n\nrequire(qpcR) \nrequire(rpanel)\nrequire(lattice)\nrequire(latticeExtra)\nrequire(grid)\nrequire(lattice)\nrequire(RColorBrewer)\nlibrary(ggplot2)\n\nlibrary(\"lattice\") \nlibrary(latticeExtra) # for mergedTrellisLegendGrob()\n\nsource(\"lib/nlsResiduals.r\")\nsource(\"lib/ridiculas_functions.r\")\nsource(\"lib/msFunc.r\")\n\n\n# Função principal para a geração dos gráficos\nrun_all <- function(modelo, dados){\n  \n  # vendo a superfície ajustada\n  args(panel.3d.contour)\n  body(panel.3d.contour)\n  \n  fcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)\n  fcc      <- dados$MODULO\n  \n  residuos <- fcc-fcc_r\n  \n  reducao_res <- (M.predict(modelo, 0.25, 0)-M.predict(modelo, 0, 0))/M.predict(modelo, 0, 0)\n  \n  print(summary(modelo))\n  print(paste(\"R^2 -> \", Q.R2(fcc_r, fcc)))\n  print(paste(\"SSE -> \", Q.SSE(fcc_r, fcc)))\n  print(paste(\"MSE -> \", Q.MSE(modelo, fcc_r, fcc)))\n  press <- Q.PRESS(modelo, 'MODULO', fcc0, dados)\n  print(paste(\"PRESS -> \", press))\n  print(paste(\"R^2 PRESS -> \", Q.R2Pred(fcc, press)))  \n\n    \n  ## TEstes de hipotese\n  \n  #Shapiro-wilk\n  print(shapiro.test(residuals(modelo)))\n\n  #Durbin-Watson test\n  print(dwtest(modelo))\n  \n  #Breusch-Pagan test\n  print(bptest(modelo))\n  \n  \n  ## PLOT  ##\n  \n  # Residuo\n  PrintResiduoNormalizado(pathImagens(\"deformacao\", \"residuo_normalizado.png\"), \n                          modelo, residuos, fcc_r)\n  \n  \n  PrintResiduoVarReg(pathImagens(\"tracao\", \"residuo.png\"),\n                     \"M\\u{F3}dulo de Deforma\\u{E7}\\u{E3}o\", residuos, dados$MODULO)\n  \n  PrintResiduoVarReg(pathImagens(\"deformacao\", \"residuo_eva.png\"),\n                     \"EVA (%)\", residuos, dados$EVA)\n  \n  PrintResiduoVarReg(pathImagens(\"deformacao\", \"residuo_fibra.png\"), \n                     \"Fibras (%)\", residuos, dados$FIBRA)\n  \n  # Funcao\n  printModeloAjuste(pathImagens(\"deformacao\", \"modelo_ajuste.png\"), \n                    modelo, fcc_r, fcc, ylim=c(20,40), xlim=c(20,40))\n  \n  # Graficos 3d\n  lim_xyz <- c(0.26, 0.021, 0, 40)\n  lbl_xyz <- c(\"EVA (%)\", \"Fibra (%)\", \"M\\u{F3}dulo de Deforma\\u{E7}\\u{E3}o (GPa)\")\n  \n  print3DFunc(pathImagens(\"deformacao\", \"3d_1.png\"), \n              modelo, \n              list(z=-50, x=-70, y=0), \n              lbl_xyz,  \n              lim_xyz)\n  \n  print3DFunc(pathImagens(\"deformacao\", \"3d_2.png\"), \n              modelo, \n              list(z=-120, x=-70, y=0), \n              lbl_xyz,  \n              lim_xyz)\n  \n  # Curvas de Nível\n  printCurvasNivelFunc(pathImagens(\"deformacao\", \"curva_nivel.png\"), modelo,  lbl_xyz,lim_xyz)\n  \n  \n  # Max resistencia Barra\n  maxFib <- optimizeFibModelo(modelo, iEva=seq(0.05, 0.25, by=0.05), TRUE)\n  printMaxResistenciaFibra(pathImagens(\"deformacao\", \"barra_max.png\"), maxFib, lbl_xyz[3])\n  \n  # Max resistencia Evolucao\n  maxFib <- optimizeFibModelo(modelo, iEva=seq(0,0.25, by=0.005), TRUE)\n  printMaxResistenciaFibraLine(pathImagens(\"deformacao\", \"eva_max.png\"), maxFib, lbl_xyz[3])\n  \n  # Resistencia por eva, com 3 curvas 0,1,2 % fibra\n  printResistenciaFibraLinha(pathImagens(\"deformacao\", \"eva_0_1_2.png\"), modelo, lbl_xyz[3])\n  \n  # Resistencia por fibra, com 3 curvas 5, 15, 25 % fibra\n  printResistenciaEVALinha(pathImagens(\"deformacao\", \"fibra_5_15_25.png\"), modelo, lbl_xyz[3])\n  \n}\n\n\n### DADOS\ndados <- read.table(file=\"dados.txt\", header=T, sep=\" \")\n\n## Filtra apenas o EVA fino\ndados <- dados[dados$TIPO!='EG15'&dados$TIPO!='1EG15',]\n\n## Dados de compressão do CR (Concreto de Referencia)\nfcc0  <- dados[dados$EVA==0&dados$FIBRA==0,]$MODULO\n\n## Dados de Compressao \nfcc   <- dados$MODULO\n\n## Calcula o y da regressao\ny     <- fcc-fcc0\n\n\n######################### Regressão  #########################\n#stepwise(fit.model,direction=c(\"forward\"),criterion = c(\"BIC\"))\n\n### MODELO 1 COMPLETO\nmodelo      <-lm(y~0+EVA+FIBRA+EVA:FIBRA+I(EVA^2)+I(FIBRA^2), data=dados) \nmodelo$fcc0 <- fcc0\nsummary(modelo)\n\nrun_all(modelo, dados)\n\n### MODELO 1 RESUMIDO\nmodelo      <-lm(y~0+EVA+I(FIBRA^2),data=dados) \nmodelo$fcc0 <- fcc0\nsummary(modelo)\n\nfcc_r    <- M.predict(modelo, dados$EVA, dados$FIBRA)\nrun_all(modelo, dados)\n\n",
    "created" : 1470873101715.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2532399731",
    "id" : "1EF918E3",
    "lastKnownWriteTime" : 1478430740,
    "path" : "D:/Dropbox/Mestrado/Projeto Marlesson/Dissertacao/Algoritimos R/Concreto/main_def.r",
    "project_path" : "main_def.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}